package com.fxp.contact.core.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.fxp.contact.core.entity.ContactAndHobby;

import com.fxp.contact.core.entity.HobbyInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOBBY_INFO".
*/
public class HobbyInfoDao extends AbstractDao<HobbyInfo, String> {

    public static final String TABLENAME = "HOBBY_INFO";

    /**
     * Properties of entity HobbyInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property HobbyId = new Property(0, String.class, "hobbyId", true, "HOBBY_ID");
        public final static Property HobbyName = new Property(1, String.class, "hobbyName", false, "HOBBY_NAME");
    }

    private DaoSession daoSession;

    private Query<HobbyInfo> contactInfo_HobbyInfosQuery;

    public HobbyInfoDao(DaoConfig config) {
        super(config);
    }
    
    public HobbyInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOBBY_INFO\" (" + //
                "\"HOBBY_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: hobbyId
                "\"HOBBY_NAME\" TEXT);"); // 1: hobbyName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOBBY_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HobbyInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getHobbyId());
 
        String hobbyName = entity.getHobbyName();
        if (hobbyName != null) {
            stmt.bindString(2, hobbyName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HobbyInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getHobbyId());
 
        String hobbyName = entity.getHobbyName();
        if (hobbyName != null) {
            stmt.bindString(2, hobbyName);
        }
    }

    @Override
    protected final void attachEntity(HobbyInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public HobbyInfo readEntity(Cursor cursor, int offset) {
        HobbyInfo entity = new HobbyInfo( //
            cursor.getString(offset + 0), // hobbyId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // hobbyName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HobbyInfo entity, int offset) {
        entity.setHobbyId(cursor.getString(offset + 0));
        entity.setHobbyName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(HobbyInfo entity, long rowId) {
        return entity.getHobbyId();
    }
    
    @Override
    public String getKey(HobbyInfo entity) {
        if(entity != null) {
            return entity.getHobbyId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HobbyInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "hobbyInfos" to-many relationship of ContactInfo. */
    public List<HobbyInfo> _queryContactInfo_HobbyInfos(String contactId) {
        synchronized (this) {
            if (contactInfo_HobbyInfosQuery == null) {
                QueryBuilder<HobbyInfo> queryBuilder = queryBuilder();
                queryBuilder.join(ContactAndHobby.class, ContactAndHobbyDao.Properties.HobbyId)
                    .where(ContactAndHobbyDao.Properties.ContactId.eq(contactId));
                contactInfo_HobbyInfosQuery = queryBuilder.build();
            }
        }
        Query<HobbyInfo> query = contactInfo_HobbyInfosQuery.forCurrentThread();
        query.setParameter(0, contactId);
        return query.list();
    }

}
