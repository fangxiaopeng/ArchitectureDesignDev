package com.fxp.contact.core.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fxp.contact.core.entity.IDCardInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IDCARD_INFO".
*/
public class IDCardInfoDao extends AbstractDao<IDCardInfo, String> {

    public static final String TABLENAME = "IDCARD_INFO";

    /**
     * Properties of entity IDCardInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IDNum = new Property(0, String.class, "IDNum", true, "IDNUM");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Sex = new Property(2, int.class, "sex", false, "SEX");
        public final static Property Nation = new Property(3, String.class, "nation", false, "NATION");
        public final static Property ValidDate = new Property(4, String.class, "validDate", false, "VALID_DATE");
    }


    public IDCardInfoDao(DaoConfig config) {
        super(config);
    }
    
    public IDCardInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IDCARD_INFO\" (" + //
                "\"IDNUM\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: IDNum
                "\"NAME\" TEXT," + // 1: name
                "\"SEX\" INTEGER NOT NULL ," + // 2: sex
                "\"NATION\" TEXT," + // 3: nation
                "\"VALID_DATE\" TEXT);"); // 4: validDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IDCARD_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IDCardInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getIDNum());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getSex());
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(4, nation);
        }
 
        String validDate = entity.getValidDate();
        if (validDate != null) {
            stmt.bindString(5, validDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IDCardInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getIDNum());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getSex());
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(4, nation);
        }
 
        String validDate = entity.getValidDate();
        if (validDate != null) {
            stmt.bindString(5, validDate);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public IDCardInfo readEntity(Cursor cursor, int offset) {
        IDCardInfo entity = new IDCardInfo( //
            cursor.getString(offset + 0), // IDNum
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // sex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nation
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // validDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IDCardInfo entity, int offset) {
        entity.setIDNum(cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSex(cursor.getInt(offset + 2));
        entity.setNation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setValidDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(IDCardInfo entity, long rowId) {
        return entity.getIDNum();
    }
    
    @Override
    public String getKey(IDCardInfo entity) {
        if(entity != null) {
            return entity.getIDNum();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IDCardInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
