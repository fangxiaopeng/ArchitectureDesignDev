package com.fxp.contact.core.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.fxp.contact.core.entity.BankCardInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANK_CARD_INFO".
*/
public class BankCardInfoDao extends AbstractDao<BankCardInfo, Long> {

    public static final String TABLENAME = "BANK_CARD_INFO";

    /**
     * Properties of entity BankCardInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CardNum = new Property(0, Long.class, "cardNum", true, "_id");
        public final static Property CardType = new Property(1, int.class, "cardType", false, "CARD_TYPE");
        public final static Property BankName = new Property(2, int.class, "bankName", false, "BANK_NAME");
        public final static Property OwnerId = new Property(3, String.class, "ownerId", false, "OWNER_ID");
    }

    private Query<BankCardInfo> contactInfo_BankCardInfosQuery;

    public BankCardInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BankCardInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANK_CARD_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: cardNum
                "\"CARD_TYPE\" INTEGER NOT NULL ," + // 1: cardType
                "\"BANK_NAME\" INTEGER NOT NULL ," + // 2: bankName
                "\"OWNER_ID\" TEXT NOT NULL );"); // 3: ownerId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANK_CARD_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BankCardInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCardNum());
        stmt.bindLong(2, entity.getCardType());
        stmt.bindLong(3, entity.getBankName());
        stmt.bindString(4, entity.getOwnerId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BankCardInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCardNum());
        stmt.bindLong(2, entity.getCardType());
        stmt.bindLong(3, entity.getBankName());
        stmt.bindString(4, entity.getOwnerId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public BankCardInfo readEntity(Cursor cursor, int offset) {
        BankCardInfo entity = new BankCardInfo( //
            cursor.getLong(offset + 0), // cardNum
            cursor.getInt(offset + 1), // cardType
            cursor.getInt(offset + 2), // bankName
            cursor.getString(offset + 3) // ownerId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BankCardInfo entity, int offset) {
        entity.setCardNum(cursor.getLong(offset + 0));
        entity.setCardType(cursor.getInt(offset + 1));
        entity.setBankName(cursor.getInt(offset + 2));
        entity.setOwnerId(cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BankCardInfo entity, long rowId) {
        entity.setCardNum(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BankCardInfo entity) {
        if(entity != null) {
            return entity.getCardNum();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BankCardInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "bankCardInfos" to-many relationship of ContactInfo. */
    public List<BankCardInfo> _queryContactInfo_BankCardInfos(String ownerId) {
        synchronized (this) {
            if (contactInfo_BankCardInfosQuery == null) {
                QueryBuilder<BankCardInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OwnerId.eq(null));
                contactInfo_BankCardInfosQuery = queryBuilder.build();
            }
        }
        Query<BankCardInfo> query = contactInfo_BankCardInfosQuery.forCurrentThread();
        query.setParameter(0, ownerId);
        return query.list();
    }

}
